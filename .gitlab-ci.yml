### --------------- List of tags that are used to select a runner. --------------- ###
## Обязательный блок для запуска gitlab-ci. Определяет, на каких runner-ах будет запущен CI/CD путем выбора его с помощью tag'а. ##

default:
  tags:
  - bigdata
  - dmz
  - docker

### --------------- Defines a job stage. --------------- ###
## Stage .pre выполняется перед всем остальным кодом. stage .post выполняется после всего остального кода. ##
## Так же можо задать порядок выполнения stage-ов, указав их по порядку в этом блоке. ##

stages:
- .pre
#- pre-commit
- static analysis
- build
- tests
- sonarqube_check
- build_and_deploy
- .post

### --------------- Include gitlab-ci-templates --------------- ###
## Добавляет в текущую конфигурацию CI\CD template's из DevOps репозитория для переиспользования. ##

include:
# VAULT
- project: DevOps/cicd-store/gitlabci/vault
  ref: v3
  file: .base_devops_get_cicd_secrets.yml

# DOCKER
- project: DevOps/cicd-store/gitlabci/docker
  ref: v3
  file: .base_docker_build.yml
- project: DevOps/cicd-store/gitlabci/docker
  ref: v3
  file: .base_docker_cleaner.yml

# SONARQUBE
- project: DevOps/cicd-store/gitlabci/sonarqube
  ref: v1
  file: .base_check_sonarqube.yml

# PIP BUILD AND DEPLOY TO JFROG
- project: DevOps/cicd-store/gitlabci/pip
  ref: v2
  file: .base_pip_pkg_build_and_deploy_to_jfrog.yml



### --------------- Get VAULT SECRET --------------- ###
## Переиспользование добавленного template'а по добавлению SSH-ключа пользователя ansible. ##
devops_get_cicd_secrets:
  extends: .base_devops_get_cicd_secrets

# TODO: сделать в отдельной задаче
#pre-commit:
#  image: $CI_REGISTRY/platform/python:${PYTHON_VERSION}
#  variables:
#    PYTHON_VERSION: '3.7'
#  stage: pre-commit
#  script:
#  - yum install -y git
#  - pip install pre-commit
#  - pre-commit run --all-files

mypy:
  image: $CI_REGISTRY/platform/python:${PYTHON_VERSION}
  variables:
    PYTHON_VERSION: '3.7'
  stage: static analysis
  script:
  - pip install mypy
  - python3 -m mypy --config-file setup.cfg onetl

flake8:
  image: $CI_REGISTRY/platform/python:${PYTHON_VERSION}
  variables:
    PYTHON_VERSION: '3.7'
  stage: static analysis
  script:
  - pip install wemake-python-styleguide
  - python3 -m flake8 --format=default . 2>&1 | tee flake8.txt
  - ls
  artifacts:
    when: always
    paths: [flake8.txt]

black:
  image: $CI_REGISTRY/platform/python:${PYTHON_VERSION}
  variables:
    PYTHON_VERSION: '3.7'
  stage: static analysis
  script:
  - pip install black
  - python3 -m black . --check

build_docker_image:
  extends: .base_docker_build
  variables:
    DOCKER_BUILD_EXTRA_ARGS: --build-arg BUILD_NUMBER=$CI_PIPELINE_ID --build-arg BRANCH_NAME=$CI_COMMIT_BRANCH
    DOCKER_IMAGE_TAG: $CI_PIPELINE_ID
  dependencies:
  - devops_get_cicd_secrets

tests:
  image: docker.rep.msk.mts.ru/test/docker-dind:20.10.8
  stage: tests
  variables:
    DOCKER_TLS_CERTDIR: ''
    GIT_STRATEGY: clone
    JUNIT_FILE: /data/onetools/onetl/junitxml.xml
    COVERAGE_FILE: /data/onetools/onetl/coverage.xml
    TEST_IMAGE: ${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_PIPELINE_ID}
  script:
  - mkdir -p /data/onetools/onetl
  - docker-compose -f docker-compose.tests.ym -p onetl-ci:${CI_PIPELINE_ID} down -v --remove-orphans || true
  - docker-compose -f docker-compose.tests.yml -p onetl-ci:${CI_PIPELINE_ID} run -u root --rm -v /data/onetools:/data/onetools onetl_tests
  after_script:
  - cp /data/onetools/onetl/* ./
  - sed -i s/'\/opt\/project\/onetl'/'onetl'/ coverage.xml
  artifacts:
    when: always
    paths:
    - coverage.xml
    reports:
      junit:
      - junitxml.xml
      cobertura:
      - coverage.xml
  tags:
  - bigdata
  - onetools
  - docker

sonarqube_check:
  extends: .base_check_sonarqube
  stage: sonarqube_check
  variables:
    SONAR_SOURCES: onetl

build_and_deploy:
  extends: .base_pip_pkg_build_and_deploy_to_jfrog
  stage: build_and_deploy
  only:
  - master
  - develop
  variables:
    PYTHON_VERSION: '3.7'

remove_docker_compose:
  image: docker.rep.msk.mts.ru/test/docker-dind:20.10.8
  stage: .post
  variables:
    CI_FILES_PATH: /builds/$CI_PROJECT_PATH
    DOCKER_PROJECT_PATH: $CI_PROJECT_PATH
  script:
  - docker-compose -f docker-compose.tests.yml -p onetl-ci:${CI_PIPELINE_ID} down -v --remove-orphans || true
  when: always

clean_docker_repo:
  extends: .base_docker_cleaner
  variables:
    DOCKER_IMAGE_NAME: $CI_PROJECT_PATH
    DOCKER_IMAGE_TAG: $CI_PIPELINE_ID
    CICD_STORE_DEBUG: 'false'
  stage: .post
  when: always
